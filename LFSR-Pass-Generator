import random
import tkinter as tk
from tkinter import messagebox

alpha = 0
num = 0
speciale = 0
total_elem = 0
min_alpha = 0
min_num = 0
min_speciale = 0

def userInput():
    global alpha
    global num
    global speciale
    global total_elem
    global min_alpha
    global min_num
    global min_speciale
    min_alpha = int(letters_entry.get())
    max_alpha = int(letters_entry1.get())
    min_num = int(num_entry.get())
    max_num = int(num_entry1.get())
    min_speciale = int(sym_entry.get())
    max_speciale = int(sym_entry1.get())
    total_elem = int(total_entry.get())
    btn.config(bg='red')
    if total_elem>max_alpha+max_num+max_speciale:
        messagebox.showwarning("Warning",f"Password length greater than the maximum characters '{max_alpha+max_num+max_speciale}'")
    elif total_elem<min_num+min_alpha+min_speciale:
        messagebox.showwarning("Warning",f"Password length smaller than the minimum size '{min_num+min_alpha+min_speciale}'")



    alpha = random.randint(min_alpha,max_alpha)
    num = random.randint(min_num,max_num)
    speciale = random.randint(min_speciale,max_speciale)


numbers = [0,1,2,3,4,5,6,7,8,9]
letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
symbols = ['!',"@",'#','$','%','^','&','*','(',')']

def generateSeed():
    seed = []
    for i in range(16):
        bit = random.randint(0,1)
        seed.append(str(bit))
    while len(seed) < 16:
        seed.append(0)
    seed = " ".join(seed)
    return seed



def generateKey():
    key = []
    index_1 = 0
    index_2 = 3
    seed = generateSeed()
    seed = seed.replace(" ","")
    byte = int(seed,2)

    while len(key) < 16:
        #Get the last bit of the byte
        last_bit = byte & 0b0000000000000001
        key.append(last_bit)


        #shift the byte to right by 1
        shift_right = (byte >> 1)  | 0x8000


        #calculate the first bit for the next byte
        bit_1 = (byte >> index_1)&1
        bit_2 = (byte >> index_2)&1
        result = bit_1 ^ bit_2


        #rebuild the byte
        mask = (result<<15)&0b1000000000000000
        if result == 0:
            mask = 0
        byte = shift_right | mask

    return key


def passwordSeed():
    '''generate the password text that needs to be converted
    :returns list of elements'''

    plain_pass = []
    for i in range(alpha):
        plain_pass.append(random.choice(letters))
    for i in range(num):
        plain_pass.append(random.choice(numbers))
    for i in range(speciale):
        plain_pass.append(random.choice(symbols))
    while len(plain_pass)<total_elem:
        plain_pass.append(random.choice(letters))
    while len(plain_pass) > total_elem:
        plain_pass.pop(0)
    random.shuffle(plain_pass)
    return plain_pass


def convertPassToBytes():
    '''convert the generated password to bytes
    :returns the bytes as a string'''
    p = passwordSeed()
    p_binary = [bin(x)[2:].zfill(8) if isinstance(x, int) else bin(ord(x))[2:].zfill(8) for x in p]
    pass_string = " ".join(p_binary)
    pass_string = pass_string.replace(" ","")
    return pass_string

def buildPass():
    '''apply xor to the generated bits of the pass using the key
    :returns a string of converted bytes '''
    key = generateKey()
    p = convertPassToBytes()
    converted_pass = []
    for i in range(len(p)):
        item = key[i% len(key)]
        element = int(p[i]) ^ int(item)
        converted_pass.append(element)
    converted_pass = ''.join(str(num) for num in converted_pass)
    return converted_pass

def generatePassword():
    p = buildPass()
    bytes = [int(p[i:i+8],2) for i in range(0,len(p),8)]
    for i,element in enumerate(bytes):
        if element > 126:
            bytes[i] = 33 + (element - 127) % 94
        elif element < 33:
            bytes[i] = (element - 33) % (127 - 33 + 1) + 33
    string = ''.join(chr(byte) for byte in bytes)
    btn.config(bg='green')

    return  string



def generate50():
    try:
        min_alpha = int(letters_entry.get())
        max_alpha = int(letters_entry1.get())
        min_num = int(num_entry.get())
        max_num = int(num_entry1.get())
        min_speciale = int(sym_entry.get())
        max_speciale = int(sym_entry1.get())
        total_elem = int(total_entry.get())
    except:
        messagebox.showwarning("Warning", "You need to provide parameters before generating passwords.")
    file = open('passwords.txt', 'w')
    for i in range(50):
        generated = generatePassword()
        file.write(generated)
        file.write("\n")
        generated = 0
    file.close()
    messagebox.showinfo("Complete","Passwords generateed successfully.")


#Build GUI

root = tk.Tk()
root.geometry("800x400")
root.title("LFSR Password Generator")

show_pass = tk.Text(root,height=10,font=('Arial',12))
show_pass.place(x=10,y=200)
def printCreatedPass():
    generate = generatePassword() + '\n'
    show_pass.insert(tk.END,generate)



letters_label = tk.Label(root, text="Min Letters", font=('Arial', 12))
letters_label.place(x=10,y=10)
letters_entry = tk.Entry(root)
letters_entry.place(x=150,y=13)

letters_label1 = tk.Label(root, text="Max Letters", font=('Arial', 12))
letters_label1.place(x=300,y=10)
letters_entry1 = tk.Entry(root)
letters_entry1.place(x=450,y=13)

num_label = tk.Label(root, text="Min Numbers", font=('Arial', 12))
num_label.place(x=10,y=40)
num_entry = tk.Entry(root)
num_entry.place(x=150,y=43)

num_label1 = tk.Label(root, text="Max Numbers", font=('Arial', 12))
num_label1.place(x=300,y=40)
num_entry1 = tk.Entry(root)
num_entry1.place(x=450,y=43)

sym_label = tk.Label(root, text="Min Symbols", font=('Arial', 12))
sym_label.place(x=10,y=70)
sym_entry = tk.Entry(root)
sym_entry.place(x=150,y=73)

sym_label1 = tk.Label(root, text="Max Symbols", font=('Arial', 12))
sym_label1.place(x=300,y=70)
sym_entry1 = tk.Entry(root)
sym_entry1.place(x=450,y=73)

total_label = tk.Label(root,text="Password Length", font=('Arial',12))
total_label.place(x=10,y=100)
total_entry = tk.Entry(root)
total_entry.place(x=150,y=103)

btn = tk.Button(root,text="Use parameters", font=('Arial',12),bg="green", command = userInput)
btn.place(x=10,y=150)

btn_generate = tk.Button(root, text="Generate Password", font=('Arial',12), command = printCreatedPass)
btn_generate.place(x=150,y=150)

file_btn = tk.Button(root,text="Generate file 50 pass", font=('Arial',12), command= generate50)
file_btn.place(x=320,y=150)

root.mainloop()
